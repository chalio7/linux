#!/bin/bash

# Mounts Android Phones and USB drives (encrypted or not). This script will
# replace the older `dmenumount` which had extra steps and couldn't handle
# encrypted drives.
# TODO: Remove already mounted Android phones from prompt.
# TODO: Try mount first for drives if in fstab to avoid directory prompt?
# TODO: Add some support for connecting iPhones (although they are annoying).

set -e

# Check for phones.
phones="$(simple-mtpfs -l 2>/dev/null | sed "s/^/ðŸ“±/")"
# Check for drives.
alldrives="$(lsblk -rpo "uuid,name,type,size,label,mountpoint,fstype")"
# Functioning for formatting drives correctly for dmenu:
filter() { sed "s/ /:/g" | awk -F':' '$7==""{printf "%s%s (%s) %s\n",$1,$3,$5,$6}' ; }


# Get all normal, non-encrypted or decrypted partitions that are not mounted.
normalparts="$(echo "$alldrives" | grep 'part\|rom\|crypt' | sed "s/^/ðŸ’¾ /" | filter )"

# Add all to one variable. If no mountable drives found, exit.
alldrives="$(echo "$phones
$normalparts" | sed "/^$/d;s/ *$//")"
test -n "$alldrives"

# Feed all found drives to dmenu and get user choice.
chosen="$(echo "$alldrives" | dmenu -p "Mount which drive?" -i)"

# Function for prompting user for a mountpoint.
getmount(){
	mp="$(find /mnt /media /mount /home -maxdepth 1 -type d 2>/dev/null | dmenu -i -p "Mount this drive where?")"
	test -n "$mp"
	if [ ! -d "$mp" ]; then
		mkdiryn=$(printf "No\\nYes" | dmenu -i -p "$mp does not exist. Create it?")
		[ "$mkdiryn" = "Yes" ] && (mkdir -p "$mp" || sudo -A mkdir -p "$mp")
	fi
}

case "$chosen" in
	ðŸ’¾*)
		chosen="${chosen%% *}"
		chosen="${chosen:1}"	# This is a bashism.
		getmount
		sudo mount "$chosen" "$mp"
		notify-send "ðŸ’¾Drive Mounted." "$chosen mounted to $mp."
		;;


	ðŸ“±*)
		getmount
		echo "OK" | dmenu -i -p "Tap Allow on your phone if it asks for permission and then press enter"
		chosen="${chosen%%:*}"
		chosen="${chosen:1}"	# This is a bashism.
		simple-mtpfs --device "$chosen" "$mp"
		notify-send "ðŸ¤– Android Mounted." "Android device mounted to $mp."
		;;
esac
